server:
  port: 8090 #提供服务的端口
# 通过eureka.client.registerWithEureka和 fetchRegistry：false
# 告知SpringCloud这是一个eureka server
eureka:
  instance:
    hostname: localhost
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
      # eureka server的名字
eureka-provider-cart: # 这是客户端要调用的服务名称
  ribbon:
    ConnectTimeout: 250 # Ribbon的连接超时时间
    ReadTimeout: 1000 # Ribbon的数据读取超时时间
    OkToRetryOnAllOperations: true # 是否对所有操作都进行重试
    MaxAutoRetriesNextServer: 1 # 切换实例的重试次数
    MaxAutoRetries: 1 # 对当前实例的重试次数
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule
    # 这里指定了负载均衡策略，这里使用随机策略(com.netflix.loadbalancer.RandomRule)，你也可以选择其他策略，
#    如轮询策略(com.netflix.loadbalancer.RoundRobinRule)或重试策略(com.netflix.loadbalancer.RetryRule)
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds:3000 #hystrix的超时时间 hystrix整合在feign中也依然生效
#          ribbon的超时时间要小于hystrix的超时时间，否则会在重试前先触发熔断
spring:
  application:
    name: eureka-portal
  #redis配置
  redis:
    #redis连接池配置
    jedis:
      pool:
        max-idle: 20
        min-idle: 10
    #redis连接配置
    host: 47.108.201.251
    database: 0
    password: '@lx20121108'
    port: 6379

  cloud:
    loadbalancer:
      retry:
        enabled: true #开启springCloud 重试功能
feign:
  hystrix:
    enabled: true #开启Feign的熔断功能



